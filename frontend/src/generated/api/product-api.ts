/* tslint:disable */
/* eslint-disable */
/**
 * e-commerce-website
 * e-commerce-website API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateProduct } from '../models';
// @ts-ignore
import { DefaultResponse } from '../models';
// @ts-ignore
import { GetProduct } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { UpdateProduct } from '../models';
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Product
         * @param {CreateProduct} createProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (createProduct: CreateProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProduct' is not null or undefined
            assertParamExists('createProduct', 'createProduct', createProduct)
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProduct, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProduct', 'productId', productId)
            const localVarPath = `/api/v1/products/{product_id}`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/api/v1/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Products
         * @param {Array<string>} category 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {Array<number>} [price] 
         * @param {string} [condition] 
         * @param {string} [productName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: async (category: Array<string>, page?: number, pageSize?: number, sortBy?: string, price?: Array<number>, condition?: string, productName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('getProducts', 'category', category)
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (category) {
                localVarQueryParameter['category'] = category;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (price) {
                localVarQueryParameter['price'] = price;
            }

            if (condition !== undefined) {
                localVarQueryParameter['condition'] = condition;
            }

            if (productName !== undefined) {
                localVarQueryParameter['product_name'] = productName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Image
         * @param {string} filedata 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImage: async (filedata: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filedata' is not null or undefined
            assertParamExists('searchImage', 'filedata', filedata)
            const localVarPath = `/api/v1/products/search_image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (filedata !== undefined) { 
                localVarFormParams.set('filedata', filedata as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Image Upload
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImageUpload: async (file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('searchImageUpload', 'file', file)
            const localVarPath = `/api/v1/products/search_image/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Product
         * @param {UpdateProduct} updateProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (updateProduct: UpdateProduct, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProduct' is not null or undefined
            assertParamExists('updateProduct', 'updateProduct', updateProduct)
            const localVarPath = `/api/v1/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProduct, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Product
         * @param {CreateProduct} createProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(createProduct: CreateProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(createProduct, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Products
         * @param {Array<string>} category 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {Array<number>} [price] 
         * @param {string} [condition] 
         * @param {string} [productName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProducts(category: Array<string>, page?: number, pageSize?: number, sortBy?: string, price?: Array<number>, condition?: string, productName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(category, page, pageSize, sortBy, price, condition, productName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Image
         * @param {string} filedata 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchImage(filedata: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchImage(filedata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Image Upload
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchImageUpload(file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchImageUpload(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Product
         * @param {UpdateProduct} updateProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(updateProduct: UpdateProduct, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(updateProduct, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Product
         * @param {CreateProduct} createProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(createProduct: CreateProduct, options?: any): AxiosPromise<DefaultResponse> {
            return localVarFp.createProduct(createProduct, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(productId: string, options?: any): AxiosPromise<DefaultResponse> {
            return localVarFp.deleteProduct(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Product
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(id: string, options?: any): AxiosPromise<GetProduct> {
            return localVarFp.getProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Products
         * @param {Array<string>} category 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [sortBy] 
         * @param {Array<number>} [price] 
         * @param {string} [condition] 
         * @param {string} [productName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(category: Array<string>, page?: number, pageSize?: number, sortBy?: string, price?: Array<number>, condition?: string, productName?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getProducts(category, page, pageSize, sortBy, price, condition, productName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Image
         * @param {string} filedata 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImage(filedata: string, options?: any): AxiosPromise<any> {
            return localVarFp.searchImage(filedata, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Image Upload
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImageUpload(file: File, options?: any): AxiosPromise<any> {
            return localVarFp.searchImageUpload(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Product
         * @param {UpdateProduct} updateProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(updateProduct: UpdateProduct, options?: any): AxiosPromise<DefaultResponse> {
            return localVarFp.updateProduct(updateProduct, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createProduct operation in ProductApi.
 * @export
 * @interface ProductApiCreateProductRequest
 */
export interface ProductApiCreateProductRequest {
    /**
     * 
     * @type {CreateProduct}
     * @memberof ProductApiCreateProduct
     */
    readonly createProduct: CreateProduct
}

/**
 * Request parameters for deleteProduct operation in ProductApi.
 * @export
 * @interface ProductApiDeleteProductRequest
 */
export interface ProductApiDeleteProductRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductApiDeleteProduct
     */
    readonly productId: string
}

/**
 * Request parameters for getProduct operation in ProductApi.
 * @export
 * @interface ProductApiGetProductRequest
 */
export interface ProductApiGetProductRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductApiGetProduct
     */
    readonly id: string
}

/**
 * Request parameters for getProducts operation in ProductApi.
 * @export
 * @interface ProductApiGetProductsRequest
 */
export interface ProductApiGetProductsRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductApiGetProducts
     */
    readonly category: Array<string>

    /**
     * 
     * @type {number}
     * @memberof ProductApiGetProducts
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof ProductApiGetProducts
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof ProductApiGetProducts
     */
    readonly sortBy?: string

    /**
     * 
     * @type {Array<number>}
     * @memberof ProductApiGetProducts
     */
    readonly price?: Array<number>

    /**
     * 
     * @type {string}
     * @memberof ProductApiGetProducts
     */
    readonly condition?: string

    /**
     * 
     * @type {string}
     * @memberof ProductApiGetProducts
     */
    readonly productName?: string
}

/**
 * Request parameters for searchImage operation in ProductApi.
 * @export
 * @interface ProductApiSearchImageRequest
 */
export interface ProductApiSearchImageRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductApiSearchImage
     */
    readonly filedata: string
}

/**
 * Request parameters for searchImageUpload operation in ProductApi.
 * @export
 * @interface ProductApiSearchImageUploadRequest
 */
export interface ProductApiSearchImageUploadRequest {
    /**
     * 
     * @type {File}
     * @memberof ProductApiSearchImageUpload
     */
    readonly file: File
}

/**
 * Request parameters for updateProduct operation in ProductApi.
 * @export
 * @interface ProductApiUpdateProductRequest
 */
export interface ProductApiUpdateProductRequest {
    /**
     * 
     * @type {UpdateProduct}
     * @memberof ProductApiUpdateProduct
     */
    readonly updateProduct: UpdateProduct
}

/**
 * ProductApi - object-oriented interface
 * @export
 * @class ProductApi
 * @extends {BaseAPI}
 */
export class ProductApi extends BaseAPI {
    /**
     * 
     * @summary Create Product
     * @param {ProductApiCreateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public createProduct(requestParameters: ProductApiCreateProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).createProduct(requestParameters.createProduct, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Product
     * @param {ProductApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public deleteProduct(requestParameters: ProductApiDeleteProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).deleteProduct(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Product
     * @param {ProductApiGetProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProduct(requestParameters: ProductApiGetProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProduct(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Products
     * @param {ProductApiGetProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public getProducts(requestParameters: ProductApiGetProductsRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getProducts(requestParameters.category, requestParameters.page, requestParameters.pageSize, requestParameters.sortBy, requestParameters.price, requestParameters.condition, requestParameters.productName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Image
     * @param {ProductApiSearchImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public searchImage(requestParameters: ProductApiSearchImageRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).searchImage(requestParameters.filedata, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Image Upload
     * @param {ProductApiSearchImageUploadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public searchImageUpload(requestParameters: ProductApiSearchImageUploadRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).searchImageUpload(requestParameters.file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Product
     * @param {ProductApiUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApi
     */
    public updateProduct(requestParameters: ProductApiUpdateProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateProduct(requestParameters.updateProduct, options).then((request) => request(this.axios, this.basePath));
    }
}
