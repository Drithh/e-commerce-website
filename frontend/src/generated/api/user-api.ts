/* tslint:disable */
/* eslint-disable */
/**
 * e-commerce-website
 * e-commerce-website API
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AppSchemasUserGetUser } from '../models';
// @ts-ignore
import { DefaultResponse } from '../models';
// @ts-ignore
import { DeleteUser } from '../models';
// @ts-ignore
import { GetUserAddress } from '../models';
// @ts-ignore
import { GetUserBalance } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { PutUserBalance } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete User
         * @param {DeleteUser} deleteUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (deleteUser: DeleteUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deleteUser' is not null or undefined
            assertParamExists('deleteUser', 'deleteUser', deleteUser)
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBalance: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Shipping Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserShippingAddress: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/user/shipping_address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put User Balance
         * @param {PutUserBalance} putUserBalance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserBalance: async (putUserBalance: PutUserBalance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'putUserBalance' is not null or undefined
            assertParamExists('putUserBalance', 'putUserBalance', putUserBalance)
            const localVarPath = `/api/v1/user/balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putUserBalance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Put User Shipping Address
         * @param {GetUserAddress} getUserAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserShippingAddress: async (getUserAddress: GetUserAddress, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getUserAddress' is not null or undefined
            assertParamExists('putUserShippingAddress', 'getUserAddress', getUserAddress)
            const localVarPath = `/api/v1/user/shipping_address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getUserAddress, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete User
         * @param {DeleteUser} deleteUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(deleteUser: DeleteUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(deleteUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppSchemasUserGetUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppSchemasUserGetUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserBalance(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserBalance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserBalance(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User Shipping Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserShippingAddress(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserAddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserShippingAddress(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Put User Balance
         * @param {PutUserBalance} putUserBalance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserBalance(putUserBalance: PutUserBalance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserBalance(putUserBalance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Put User Shipping Address
         * @param {GetUserAddress} getUserAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putUserShippingAddress(getUserAddress: GetUserAddress, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putUserShippingAddress(getUserAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete User
         * @param {DeleteUser} deleteUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(deleteUser: DeleteUser, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUser(deleteUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUser(options?: any): AxiosPromise<Array<AppSchemasUserGetUser>> {
            return localVarFp.getAllUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: any): AxiosPromise<AppSchemasUserGetUser> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Balance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserBalance(options?: any): AxiosPromise<GetUserBalance> {
            return localVarFp.getUserBalance(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Shipping Address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserShippingAddress(options?: any): AxiosPromise<GetUserAddress> {
            return localVarFp.getUserShippingAddress(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put User Balance
         * @param {PutUserBalance} putUserBalance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserBalance(putUserBalance: PutUserBalance, options?: any): AxiosPromise<DefaultResponse> {
            return localVarFp.putUserBalance(putUserBalance, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Put User Shipping Address
         * @param {GetUserAddress} getUserAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putUserShippingAddress(getUserAddress: GetUserAddress, options?: any): AxiosPromise<DefaultResponse> {
            return localVarFp.putUserShippingAddress(getUserAddress, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUser operation in UserApi.
 * @export
 * @interface UserApiDeleteUserRequest
 */
export interface UserApiDeleteUserRequest {
    /**
     * 
     * @type {DeleteUser}
     * @memberof UserApiDeleteUser
     */
    readonly deleteUser: DeleteUser
}

/**
 * Request parameters for putUserBalance operation in UserApi.
 * @export
 * @interface UserApiPutUserBalanceRequest
 */
export interface UserApiPutUserBalanceRequest {
    /**
     * 
     * @type {PutUserBalance}
     * @memberof UserApiPutUserBalance
     */
    readonly putUserBalance: PutUserBalance
}

/**
 * Request parameters for putUserShippingAddress operation in UserApi.
 * @export
 * @interface UserApiPutUserShippingAddressRequest
 */
export interface UserApiPutUserShippingAddressRequest {
    /**
     * 
     * @type {GetUserAddress}
     * @memberof UserApiPutUserShippingAddress
     */
    readonly getUserAddress: GetUserAddress
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Delete User
     * @param {UserApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public deleteUser(requestParameters: UserApiDeleteUserRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).deleteUser(requestParameters.deleteUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getAllUser(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getAllUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUser(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Balance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserBalance(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserBalance(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Shipping Address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserShippingAddress(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserShippingAddress(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Put User Balance
     * @param {UserApiPutUserBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public putUserBalance(requestParameters: UserApiPutUserBalanceRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).putUserBalance(requestParameters.putUserBalance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Put User Shipping Address
     * @param {UserApiPutUserShippingAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public putUserShippingAddress(requestParameters: UserApiPutUserShippingAddressRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).putUserShippingAddress(requestParameters.getUserAddress, options).then((request) => request(this.axios, this.basePath));
    }
}
